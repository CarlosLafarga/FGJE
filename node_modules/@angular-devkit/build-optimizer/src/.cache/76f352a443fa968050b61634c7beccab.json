{"remainingRequest":"C:\\Users\\Armando\\Documents\\CAD\\FGJE\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Armando\\Documents\\CAD\\FGJE\\node_modules\\ngx-loading\\ngx-loading\\ngx-loading.es5.js","dependencies":[{"path":"C:\\Users\\Armando\\Documents\\CAD\\FGJE\\node_modules\\ngx-loading\\ngx-loading\\ngx-loading.es5.js","mtime":499162500000},{"path":"C:\\Users\\Armando\\Documents\\CAD\\FGJE\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552513841962},{"path":"C:\\Users\\Armando\\Documents\\CAD\\FGJE\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":499162500000}],"contextDependencies":[],"result":["import { ChangeDetectorRef, Component, Inject, Injectable, Input, NgModule, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nvar NgxLoadingConfig = /*@__PURE__*/ (function () {\n    /**\n     * @param {?=} config\n     */\n    function NgxLoadingConfig(config) {\n        if (config === void 0) {\n            config = {};\n        }\n        this.backdropBorderRadius = config.backdropBorderRadius;\n        this.backdropBackgroundColour = config.backdropBackgroundColour;\n        this.fullScreenBackdrop = config.fullScreenBackdrop;\n        this.animationType = config.animationType;\n        this.primaryColour = config.primaryColour;\n        this.secondaryColour = config.secondaryColour;\n        this.tertiaryColour = config.tertiaryColour;\n    }\n    return NgxLoadingConfig;\n}());\nvar ngxLoadingAnimationTypes = {\n    chasingDots: 'chasing-dots',\n    circle: 'sk-circle',\n    circleSwish: 'circleSwish',\n    cubeGrid: 'sk-cube-grid',\n    doubleBounce: 'double-bounce',\n    none: 'none',\n    pulse: 'pulse',\n    rectangleBounce: 'rectangle-bounce',\n    rotatingPlane: 'rotating-plane',\n    threeBounce: 'three-bounce',\n    wanderingCubes: 'wandering-cubes'\n};\nvar NgxLoadingService = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} config\n     */\n    function NgxLoadingService(config) {\n        this.config = config;\n        this.loadingConfig = this.config || new NgxLoadingConfig();\n    }\n    return NgxLoadingService;\n}());\nvar NgxLoadingComponent = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} LoadingService\n     * @param {?} changeDetectorRef\n     */\n    function NgxLoadingComponent(LoadingService, changeDetectorRef) {\n        this.LoadingService = LoadingService;\n        this.changeDetectorRef = changeDetectorRef;\n        this.config = new NgxLoadingConfig();\n        this.defaultConfig = {\n            animationType: ngxLoadingAnimationTypes.threeBounce,\n            backdropBackgroundColour: 'rgba(0, 0, 0, 0.3)',\n            backdropBorderRadius: '0px',\n            fullScreenBackdrop: false,\n            primaryColour: '#ffffff',\n            secondaryColour: '#ffffff',\n            tertiaryColour: '#ffffff'\n        };\n        this.ngxLoadingAnimationTypes = ngxLoadingAnimationTypes;\n    }\n    /**\n     * @return {?}\n     */\n    NgxLoadingComponent.prototype.ngOnInit = function () {\n        this.setupConfig();\n    };\n    /**\n     * @return {?}\n     */\n    NgxLoadingComponent.prototype.setupConfig = function () {\n        for (var /** @type {?} */ option in this.defaultConfig) {\n            if (typeof this.config[option] === 'boolean') {\n                if (this.config[option] != null) {\n                    continue;\n                }\n                this.config[option] = this.LoadingService.loadingConfig[option] != null ? this.LoadingService.loadingConfig[option] : this.defaultConfig[option];\n            }\n            else {\n                if (this.config[option] != null) {\n                    continue;\n                }\n                this.config[option] = this.LoadingService.loadingConfig[option] != null ? this.LoadingService.loadingConfig[option] : this.defaultConfig[option];\n            }\n        }\n    };\n    /**\n     * @param {?} show\n     * @return {?}\n     */\n    NgxLoadingComponent.prototype.setShow = function (show) {\n        this.show = show;\n        this.changeDetectorRef.markForCheck();\n    };\n    return NgxLoadingComponent;\n}());\nvar NgxLoadingModule = /*@__PURE__*/ (function () {\n    function NgxLoadingModule() {\n    }\n    /**\n     * @param {?} loadingConfig\n     * @return {?}\n     */\n    NgxLoadingModule.forRoot = function (loadingConfig) {\n        return {\n            ngModule: NgxLoadingModule,\n            providers: [{ provide: 'loadingConfig', useValue: loadingConfig }]\n        };\n    };\n    return NgxLoadingModule;\n}());\n/**\n * Generated bundle index. Do not edit.\n */\nexport { NgxLoadingService, NgxLoadingComponent, NgxLoadingModule, NgxLoadingConfig, ngxLoadingAnimationTypes };\n//# sourceMappingURL=ngx-loading.es5.js.map\n",null]}