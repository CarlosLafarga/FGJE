{"remainingRequest":"C:\\Users\\USUARIO\\Documents\\FGJE\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\USUARIO\\Documents\\FGJE\\node_modules\\widgster\\widgster.js","dependencies":[{"path":"C:\\Users\\USUARIO\\Documents\\FGJE\\node_modules\\widgster\\widgster.js","mtime":1507810096000},{"path":"C:\\Users\\USUARIO\\Documents\\FGJE\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1528147424000},{"path":"C:\\Users\\USUARIO\\Documents\\FGJE\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":499162500000}],"contextDependencies":[],"result":["/**\n * Widgster plugin.\n */\n( function( global, factory ) {\n    \"use strict\";\n\n    if (global.jQuery && global.jQuery.fn) {\n        factory(global.jQuery);\n    } else {\n        console.warn(\"Widgster must be executed in a browser environment with jQuery defined\");\n    }\n} )( typeof window !== \"undefined\" ? window : this, function( $ ) {\n    // WIDGSTER CLASS DEFINITION\n    // ======================\n\n    var Widgster = function (el, options) {\n        this.$element = $(el);\n        this.$collapse = this.$element.find('[data-widgster=collapse]');\n        this.$expand = this.$element.find('[data-widgster=expand]');\n        this.$fullscreen = this.$element.find('[data-widgster=fullscreen]');\n        this.$restore = this.$element.find('[data-widgster=restore]');\n        this.options = options;\n        this.collapsed = options.collapsed;\n        this.fullscreened = options.fullscreened;\n\n        this._initHandlers();\n\n        if (this.collapsed){\n            this.collapse(false);\n        } else {\n            this.$expand.hide();\n        }\n\n        if (this.fullscreened){\n            this.fullscreen();\n        } else {\n            this.$restore.hide();\n        }\n\n        this.options.autoload && this.load();\n        var interval = parseInt(this.options.autoload);\n        if (!isNaN(interval)){\n            var widgster = this;\n            this._autoloadInterval = setInterval(function(){\n                widgster.load();\n            }, interval)\n        }\n    };\n\n    Widgster.DEFAULTS = {\n        collapsed: false,\n        fullscreened: false,\n        transitionDuration: 150,\n        bodySelector: '.body',\n        showLoader: true,\n        autoload: false,\n        loaderTemplate: '<div style=\"text-align: center; margin-top: 10px;\">Loading...</div>',\n        /**\n         * provide a way to insert a prompt before removing widget\n         * @param callback\n         */\n        closePrompt: function(callback){\n            callback()\n        }\n    };\n\n    Widgster.prototype.collapse = function(animate){\n        animate = typeof animate == \"undefined\" ? true : animate;\n        var e = $.Event('collapse.widgster');\n        this.$element.trigger(e);\n        if (e.isDefaultPrevented()) return;\n\n        var widgster = this,\n            duration = animate ? this.options.transitionDuration : 0;\n        this.$element.find(this.options.bodySelector).slideUp(duration, function(){\n            widgster.$element.addClass('collapsed');\n            widgster.$element.trigger($.Event('collapsed.widgster'));\n            widgster.collapsed = true;\n        });\n\n        this.$collapse.hide();\n        this.$expand.show();\n\n        return false;\n    };\n\n    Widgster.prototype.expand = function(animate){\n        animate = typeof animate == \"undefined\" ? true : animate;\n        var e = $.Event('expand.widgster');\n        this.$element.trigger(e);\n        if (e.isDefaultPrevented()) return;\n\n        var widgster = this,\n            duration = animate ? this.options.transitionDuration : 0;\n        this.$element.find(this.options.bodySelector).slideDown(duration, function(){\n            widgster.$element.removeClass('collapsed');\n            widgster.$element.trigger($.Event('expanded.widgster'));\n            widgster.collapsed = false;\n        });\n\n        this.$collapse.show();\n        this.$expand.hide();\n\n        return false;\n    };\n\n    Widgster.prototype.close = function(){\n\n        this.options.closePrompt && this.options.closePrompt($.proxy(this._doClose, this));\n\n        return false;\n    };\n\n    Widgster.prototype.load = function(){\n        var e = $.Event('load.widgster');\n\n        this.$element.trigger(e);\n\n        if (e.isDefaultPrevented()) return;\n\n        var widgster = this;\n        this.$element.find(this.options.bodySelector).load(this.options.load, function(responseText, textStatus, xhr){\n            widgster.expand();\n            widgster.options.showLoader && widgster._hideLoader();\n            widgster.$element.trigger($.Event('loaded.widgster', {\n                responseText: responseText,\n                textStatus: textStatus,\n                xhr: xhr\n            }))\n        });\n        this.options.showLoader && this._showLoader();\n\n        return false;\n    };\n\n    Widgster.prototype.fullscreen = function(){\n        var e = $.Event('fullscreen.widgster');\n\n        this.$element.trigger(e);\n\n        if (e.isDefaultPrevented()) return;\n\n        this.$element.css({\n            position: 'fixed',\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n            margin: 0,\n            'z-index': 10000\n        });\n        $('body').css('overflow', 'hidden');\n\n        this.wasCollapsed = this.collapsed;\n        this.expand(false);\n\n        this.$fullscreen.hide();\n        this.$restore.show();\n\n        this.$collapse.hide(); this.$expand.hide();\n\n        this.$element.addClass('fullscreened');\n\n        this.$element.trigger($.Event('fullscreened.widgster'));\n\n        return false;\n    };\n\n    Widgster.prototype.restore = function(){\n        var e = $.Event('restore.widgster');\n\n        this.$element.trigger(e);\n\n        if (e.isDefaultPrevented()) return;\n\n        this.$element.css({\n            position: '',\n            top: '',\n            right: '',\n            bottom: '',\n            left: '',\n            margin: '',\n            'z-index': ''\n        });\n        $('body').css('overflow', '');\n\n        this.$fullscreen.show();\n        this.$restore.hide();\n\n        if (this.collapsed){\n            this.$collapse.hide(); this.$expand.show();\n        } else {\n            this.$collapse.show(); this.$expand.hide();\n        }\n\n        this.wasCollapsed && this.collapse(false);\n\n        this.$element.removeClass('fullscreened');\n\n        this.$element.trigger($.Event('restored.widgster'));\n\n        return false;\n    };\n\n    Widgster.prototype._doClose = function(){\n        //could have been remove.widgster, but http://bugs.jquery.com/ticket/14600\n        var e = $.Event('close.widgster');\n\n        this.$element.trigger(e);\n\n        if (e.isDefaultPrevented()) return;\n\n        $('body').css('overflow', '');\n\n        this.$element.detach();\n\n        e = $.Event('closed.widgster', {$element: this.$element});\n\n        this.$element.trigger(e);\n    };\n\n    Widgster.prototype._showLoader = function(){\n        var $body = this.$element.find(this.options.bodySelector);\n\n        this.$loaderWrap = this.$element.find('.widgster-loader-wrap');\n\n        //create loader html if does not exist\n        if (this.$loaderWrap.length == 0){\n            this.$loaderWrap = $('<div class=\"widgster-loader-wrap\" style=\"position: absolute; top: 0; right: 0; bottom: 0; ' +\n                'left: 0; display: none\"></div>');\n            this.$element.append(this.$loaderWrap);\n        }\n        this.$loaderWrap.html(this.options.loaderTemplate);\n        this.$loaderWrap.css({\n            'margin-top': $body.position().top\n        });\n        if (!this.collapsed){\n            $body.fadeTo(this.options.transitionDuration, 0);\n            this.$loaderWrap.fadeIn(this.options.transitionDuration)\n        }\n    };\n\n    Widgster.prototype._hideLoader = function(){\n        this.$loaderWrap.fadeOut(this.options.transitionDuration);\n        this.$element.find(this.options.bodySelector).fadeTo(this.options.transitionDuration, 1);\n    };\n\n    /**\n     * Attach all required widgster functions to data-widgster elements.\n     * @private\n     */\n    Widgster.prototype._initHandlers = function(){\n        this.$element.on('click.collapse.widgster', '[data-widgster=collapse]', $.proxy(this.collapse, this));\n        this.$element.on('click.expand.widgster', '[data-widgster=expand]', $.proxy(this.expand, this));\n        this.$element.on('click.close.widgster', '[data-widgster=close]', $.proxy(this.close, this));\n        this.$element.on('click.load.widgster', '[data-widgster=load]', $.proxy(this.load, this));\n        this.$element.on('click.fullscreen.widgster', '[data-widgster=fullscreen]', $.proxy(this.fullscreen, this));\n        this.$element.on('click.restore.widgster', '[data-widgster=restore]', $.proxy(this.restore, this));\n    };\n\n\n    // NAMESPACED DATA ATTRIBUTES\n    // =======================\n\n    function getNamespacedData(namespace, data){\n        var namespacedData = {};\n        for (var key in data){\n            // key starts with namespace\n            if (key.slice(0, namespace.length) == namespace){\n                var namespacedKey = key.slice(namespace.length, key.length);\n                namespacedKey = namespacedKey.charAt(0).toLowerCase() + namespacedKey.slice(1);\n                namespacedData[namespacedKey] = data[key];\n            }\n        }\n\n        return namespacedData;\n    }\n\n    // WIDGSTER PLUGIN DEFINITION\n    // =======================\n\n    $.fn.widgster = function (option) {\n        return this.each(function () {\n            var $this   = $(this);\n            var data    = $this.data('widgster');\n            var options = $.extend({}, Widgster.DEFAULTS, getNamespacedData('widgster', $this.data()), typeof option == 'object' && option);\n\n            if (!data) $this.data('widgster', new Widgster(this, options));\n            if (typeof option == 'string') data[option]();\n        })\n    };\n\n    $.fn.widgster.Constructor = Widgster;\n});",null]}